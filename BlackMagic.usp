/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "BlackMagic"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT BM_init, Cam[3,3];
// ANALOG_INPUT 
//STRING_INPUT BM_RX[1500];
BUFFER_INPUT BM_RX[1500];

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT BM_TX;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
UDP_SOCKET BMUDP[1500];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
//INTEGER EchoID, PacketID;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING SessionID[2], PacketID[2], EchoID[2];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function IncEchoID()
{
	INTEGER i;
	i = Byte(EchoID, 2)+1;
	if (i < 256) SetString(Chr(i), 2, EchoID);
	else
	{
		i = Byte(EchoID, 1)+1;
		SetString(Chr(i), 1, EchoID);
		SetString("\x00", 2, EchoID);
	}
print("EchoID %x %x\n",byte(EchoID,1),byte(EchoID,2));
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH BM_init
{
	BM_TX = "\x10\x14\x00\x29\x00\x00\x00\x00\x00\xAB\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00";
	EchoID = "\x00\x01";
}
*/
PUSH BM_init
{
    SIGNED_INTEGER status;
    status = SocketUDP_Enable(BMUDP, "192.168.0.50", 9910);
    if (status < 0)
        Print("Error listening on port %d", status);
    Status = SocketSend(BMUDP, "\x10\x14\x00\x29\x00\x00\x00\x00\x00\xAB\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00");
    if (Status < 0)
        Print("Error Sending to MyUDP: %d\n", Status);

	EchoID = "\x00\x01";
}
/*
PUSH Cam
{
	INTEGER CamNo;
	CamNo = GetLastModifiedArrayIndex();
	BM_TX = "\x08\x18" + SessionID + "\x00\x00\x00\x00\x00\x00" + EchoID + "\x00\x0c\x8f\x00" + "CPgI" + "\x00\xda\x00" + Chr(CamNo);
}
*/
/*
RELEASE input
{
    // TODO:  Add code here
}
*/
/*
CHANGE BM_RX
{
	INTEGER FL, Length, i;
print("Len input %u\n",len(BM_RX));
if(len(BM_RX)=1400) clearbuffer(BM_RX);else{
	FL = getc(BM_RX);
	Length = (FL&7)*256 + getc(BM_RX);
	SessionID = chr(getc(BM_RX))+chr(getc(BM_RX));
print("SessID %x %x\n",byte(SessionID,1),byte(SessionID,2));
	i=getc(BM_RX);i=getc(BM_RX);//packet reseive
	i=getc(BM_RX);i=getc(BM_RX);//null
	i=getc(BM_RX);i=getc(BM_RX);//trash

	PacketID = chr(getc(BM_RX))+chr(getc(BM_RX));
print("PacketID %x %x\n",byte(PacketID,1),byte(PacketID,2));
	if (Len(BM_RX)<210) //&&(Byte(BM_RX, 10)=0)
	{
		if (SessionID="\x00\x29") BM_TX = "\x80\x0c\x00\x29\x00\x00\x00\x00\x00\x18\x00\x00"; //handshake
		else 
		{
			BM_TX = "\x88\x0c" + SessionID + PacketID + "\x00\x00\x00\x00" + EchoID;
			IncEchoID();
		}
	}
	clearbuffer(BM_RX);}
}
*/
SOCKETRECEIVE BMUDP
{
	STRING BM_RX[1500], BM_TX[1500];
print("Len: %u\n",Len(BMUDP.SocketRxBuf));
BM_RX = BMUDP.SocketRxBuf;	
if ((Len(BM_RX)<210)&&(Len(BM_RX)>10)) //&&(Byte(BM_RX, 10)=0)
	{
    
	SessionID = mid(BM_RX,3,2);
print("SessID %x %x\n",byte(SessionID,1),byte(SessionID,2));
    PacketID = mid(BM_RX,11,2);
print("PacketID %x %x\n",byte(PacketID,1),byte(PacketID,2));
		if (SessionID="\x00\x29") BM_TX = "\x80\x0c\x00\x29\x00\x00\x00\x00\x00\x18\x00\x00"; //handshake
		else 
		{
			BM_TX = "\x88\x0c" + SessionID + PacketID + "\x00\x00\x00\x00" + EchoID;
			IncEchoID();
		}
	SocketSend(BMUDP, BM_TX);
	}
ClearBuffer(BMUDP.SocketRxBuf);
}
/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

